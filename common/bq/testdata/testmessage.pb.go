// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/TriggerMail/luci-go/common/bq/testdata/testmessage.proto

package testdata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _struct "github.com/golang/protobuf/ptypes/struct"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestMessage_FOO int32

const (
	TestMessage_X TestMessage_FOO = 0
	TestMessage_Y TestMessage_FOO = 1
	TestMessage_Z TestMessage_FOO = 2
)

var TestMessage_FOO_name = map[int32]string{
	0: "X",
	1: "Y",
	2: "Z",
}
var TestMessage_FOO_value = map[string]int32{
	"X": 0,
	"Y": 1,
	"Z": 2,
}

func (x TestMessage_FOO) String() string {
	return proto.EnumName(TestMessage_FOO_name, int32(x))
}
func (TestMessage_FOO) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_testmessage_4e895ea602185c82, []int{0, 0}
}

type TestMessage struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Nested               *NestedTestMessage   `protobuf:"bytes,3,opt,name=nested" json:"nested,omitempty"`
	RepeatedNested       []*NestedTestMessage `protobuf:"bytes,4,rep,name=repeated_nested,json=repeatedNested" json:"repeated_nested,omitempty"`
	Struct               *_struct.Struct      `protobuf:"bytes,5,opt,name=struct" json:"struct,omitempty"`
	Foo                  TestMessage_FOO      `protobuf:"varint,6,opt,name=foo,enum=testdata.TestMessage_FOO" json:"foo,omitempty"`
	FooRepeated          []TestMessage_FOO    `protobuf:"varint,7,rep,packed,name=foo_repeated,json=fooRepeated,enum=testdata.TestMessage_FOO" json:"foo_repeated,omitempty"`
	Empty                *empty.Empty         `protobuf:"bytes,8,opt,name=empty" json:"empty,omitempty"`
	Empties              []*empty.Empty       `protobuf:"bytes,9,rep,name=empties" json:"empties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TestMessage) Reset()         { *m = TestMessage{} }
func (m *TestMessage) String() string { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()    {}
func (*TestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_testmessage_4e895ea602185c82, []int{0}
}
func (m *TestMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestMessage.Unmarshal(m, b)
}
func (m *TestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestMessage.Marshal(b, m, deterministic)
}
func (dst *TestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMessage.Merge(dst, src)
}
func (m *TestMessage) XXX_Size() int {
	return xxx_messageInfo_TestMessage.Size(m)
}
func (m *TestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestMessage proto.InternalMessageInfo

func (m *TestMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestMessage) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TestMessage) GetNested() *NestedTestMessage {
	if m != nil {
		return m.Nested
	}
	return nil
}

func (m *TestMessage) GetRepeatedNested() []*NestedTestMessage {
	if m != nil {
		return m.RepeatedNested
	}
	return nil
}

func (m *TestMessage) GetStruct() *_struct.Struct {
	if m != nil {
		return m.Struct
	}
	return nil
}

func (m *TestMessage) GetFoo() TestMessage_FOO {
	if m != nil {
		return m.Foo
	}
	return TestMessage_X
}

func (m *TestMessage) GetFooRepeated() []TestMessage_FOO {
	if m != nil {
		return m.FooRepeated
	}
	return nil
}

func (m *TestMessage) GetEmpty() *empty.Empty {
	if m != nil {
		return m.Empty
	}
	return nil
}

func (m *TestMessage) GetEmpties() []*empty.Empty {
	if m != nil {
		return m.Empties
	}
	return nil
}

type NestedTestMessage struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NestedTestMessage) Reset()         { *m = NestedTestMessage{} }
func (m *NestedTestMessage) String() string { return proto.CompactTextString(m) }
func (*NestedTestMessage) ProtoMessage()    {}
func (*NestedTestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_testmessage_4e895ea602185c82, []int{1}
}
func (m *NestedTestMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedTestMessage.Unmarshal(m, b)
}
func (m *NestedTestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedTestMessage.Marshal(b, m, deterministic)
}
func (dst *NestedTestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedTestMessage.Merge(dst, src)
}
func (m *NestedTestMessage) XXX_Size() int {
	return xxx_messageInfo_NestedTestMessage.Size(m)
}
func (m *NestedTestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedTestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NestedTestMessage proto.InternalMessageInfo

func (m *NestedTestMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*TestMessage)(nil), "testdata.TestMessage")
	proto.RegisterType((*NestedTestMessage)(nil), "testdata.NestedTestMessage")
	proto.RegisterEnum("testdata.TestMessage_FOO", TestMessage_FOO_name, TestMessage_FOO_value)
}

func init() {
	proto.RegisterFile("github.com/TriggerMail/luci-go/common/bq/testdata/testmessage.proto", fileDescriptor_testmessage_4e895ea602185c82)
}

var fileDescriptor_testmessage_4e895ea602185c82 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcf, 0x4f, 0xc2, 0x30,
	0x14, 0xc7, 0x1d, 0x83, 0x01, 0xc5, 0x20, 0xf6, 0xa0, 0x75, 0x98, 0xb8, 0x70, 0x91, 0x44, 0xd3,
	0x19, 0xb8, 0x68, 0xe2, 0x51, 0xb9, 0xe9, 0x92, 0xc9, 0x41, 0xbd, 0x90, 0x31, 0xba, 0xb9, 0x84,
	0xf2, 0xe6, 0xda, 0x1d, 0xfc, 0xa7, 0xfd, 0x1b, 0xcc, 0xba, 0x55, 0x08, 0xf8, 0xe3, 0xd4, 0x97,
	0x7e, 0x3f, 0xdf, 0xf7, 0x7d, 0xed, 0x43, 0x37, 0x31, 0xd0, 0xf0, 0x2d, 0x03, 0x9e, 0xe4, 0x9c,
	0x42, 0x16, 0xbb, 0xcb, 0x3c, 0x4c, 0xdc, 0x10, 0x38, 0x87, 0x95, 0x3b, 0x7f, 0x77, 0x25, 0x13,
	0x72, 0x11, 0xc8, 0x40, 0x15, 0x9c, 0x09, 0x11, 0xc4, 0x8c, 0xa6, 0x19, 0x48, 0xc0, 0x2d, 0xad,
	0xd9, 0xfd, 0x18, 0x20, 0x5e, 0x32, 0x57, 0xdd, 0xcf, 0xf3, 0xc8, 0x65, 0x3c, 0x95, 0x1f, 0x25,
	0x66, 0x9f, 0x6d, 0x8b, 0x32, 0xe1, 0x4c, 0xc8, 0x80, 0xa7, 0x15, 0x70, 0xba, 0x0d, 0x08, 0x99,
	0xe5, 0xa1, 0x2c, 0xd5, 0xc1, 0xa7, 0x89, 0x3a, 0x53, 0x26, 0xe4, 0x43, 0x99, 0x8d, 0x31, 0xaa,
	0xaf, 0x02, 0xce, 0x88, 0xe1, 0x18, 0xc3, 0xb6, 0xaf, 0x6a, 0x7c, 0x8d, 0xda, 0xdf, 0x4d, 0x49,
	0xcd, 0x31, 0x86, 0x9d, 0x91, 0x4d, 0xcb, 0xae, 0x54, 0x77, 0xa5, 0x53, 0x4d, 0xf8, 0x6b, 0x18,
	0x8f, 0x91, 0xb5, 0x62, 0x42, 0xb2, 0x05, 0x31, 0x95, 0xad, 0x4f, 0xf5, 0xa3, 0xe8, 0xa3, 0xba,
	0xdf, 0x88, 0xf6, 0x2b, 0x14, 0xdf, 0xa1, 0x83, 0x8c, 0xa5, 0x2c, 0x90, 0x6c, 0x31, 0xab, 0xdc,
	0x75, 0xc7, 0xfc, 0xcf, 0xdd, 0xd5, 0x9e, 0x52, 0xc2, 0x2e, 0xb2, 0xca, 0x87, 0x92, 0x86, 0x8a,
	0x3e, 0xde, 0x99, 0xf8, 0x49, 0xc9, 0x7e, 0x85, 0xe1, 0x0b, 0x64, 0x46, 0x00, 0xc4, 0x72, 0x8c,
	0x61, 0x77, 0x74, 0xb2, 0x8e, 0xda, 0x08, 0xa1, 0x13, 0xcf, 0xf3, 0x0b, 0x0a, 0xdf, 0xa2, 0xfd,
	0x08, 0x60, 0xa6, 0x33, 0x49, 0xd3, 0x31, 0xff, 0x76, 0x75, 0x22, 0x00, 0xbf, 0xa2, 0xf1, 0x25,
	0x6a, 0xa8, 0x15, 0x92, 0x96, 0x1a, 0xed, 0x68, 0x67, 0xb4, 0xfb, 0x42, 0xf5, 0x4b, 0x08, 0x5f,
	0xa1, 0x66, 0x51, 0x24, 0x4c, 0x90, 0xb6, 0xfa, 0x87, 0xdf, 0x78, 0x8d, 0x0d, 0x6c, 0x64, 0x4e,
	0x3c, 0x0f, 0x37, 0x90, 0xf1, 0xdc, 0xdb, 0x2b, 0x8e, 0x97, 0x9e, 0x51, 0x1c, 0xaf, 0xbd, 0xda,
	0xe0, 0x1c, 0x1d, 0xee, 0x7c, 0xde, 0x4f, 0x5b, 0x9f, 0x5b, 0xaa, 0xfb, 0xf8, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x92, 0xfd, 0x21, 0x3b, 0xc3, 0x02, 0x00, 0x00,
}
