// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tmp/test.proto

package test

import prpc "github.com/TriggerMail/luci-go/grpc/prpc"

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_c13593f9227294d1, []int{0}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Void)(nil), "test.Void")
}

func init() { proto.RegisterFile("tmp/test.proto", fileDescriptor_c13593f9227294d1) }

var fileDescriptor_c13593f9227294d1 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xc9, 0x2d, 0xd0,
	0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0xa5, 0x14,
	0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0x62, 0x49, 0xa5, 0x69, 0xfa, 0x29, 0xa9, 0xc5,
	0xc9, 0x45, 0x99, 0x05, 0x25, 0xf9, 0x45, 0x10, 0x75, 0x52, 0xf2, 0xe8, 0x2a, 0x4a, 0x32, 0x73,
	0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b, 0x20, 0x0a, 0x94, 0xd8, 0xb8, 0x58, 0xc2, 0xf2, 0x33, 0x53,
	0x8c, 0x1a, 0x18, 0xb9, 0xd8, 0xdd, 0x8b, 0x52, 0x53, 0x4b, 0x52, 0x8b, 0x84, 0xec, 0xb8, 0x38,
	0x5c, 0xc0, 0x06, 0x25, 0xa5, 0x0a, 0x71, 0xe9, 0x81, 0x6d, 0x05, 0xa9, 0x91, 0x52, 0xd1, 0x83,
	0x98, 0xa6, 0x07, 0x33, 0x4d, 0xcf, 0x2d, 0x33, 0x27, 0xd5, 0x05, 0x6e, 0x67, 0x00, 0xd8, 0x44,
	0x06, 0x21, 0x53, 0x2e, 0xce, 0x10, 0x98, 0x35, 0x28, 0x06, 0x48, 0x61, 0x18, 0x00, 0x57, 0xa7,
	0xc4, 0x90, 0xc4, 0x06, 0x16, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x04, 0x70, 0xbd, 0xc1,
	0xec, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	Describe(ctx context.Context, in *Void, opts ...grpc.CallOption) (*descriptor.FileDescriptorProto, error)
	Timestamp(ctx context.Context, in *Void, opts ...grpc.CallOption) (*timestamp.Timestamp, error)
}
type greeterPRPCClient struct {
	client *prpc.Client
}

func NewGreeterPRPCClient(client *prpc.Client) GreeterClient {
	return &greeterPRPCClient{client}
}

func (c *greeterPRPCClient) Describe(ctx context.Context, in *Void, opts ...grpc.CallOption) (*descriptor.FileDescriptorProto, error) {
	out := new(descriptor.FileDescriptorProto)
	err := c.client.Call(ctx, "test.Greeter", "Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterPRPCClient) Timestamp(ctx context.Context, in *Void, opts ...grpc.CallOption) (*timestamp.Timestamp, error) {
	out := new(timestamp.Timestamp)
	err := c.client.Call(ctx, "test.Greeter", "Timestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) Describe(ctx context.Context, in *Void, opts ...grpc.CallOption) (*descriptor.FileDescriptorProto, error) {
	out := new(descriptor.FileDescriptorProto)
	err := c.cc.Invoke(ctx, "/test.Greeter/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Timestamp(ctx context.Context, in *Void, opts ...grpc.CallOption) (*timestamp.Timestamp, error) {
	out := new(timestamp.Timestamp)
	err := c.cc.Invoke(ctx, "/test.Greeter/Timestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	Describe(context.Context, *Void) (*descriptor.FileDescriptorProto, error)
	Timestamp(context.Context, *Void) (*timestamp.Timestamp, error)
}

func RegisterGreeterServer(s prpc.Registrar, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Greeter/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Describe(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Timestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Timestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Greeter/Timestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Timestamp(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _Greeter_Describe_Handler,
		},
		{
			MethodName: "Timestamp",
			Handler:    _Greeter_Timestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tmp/test.proto",
}
